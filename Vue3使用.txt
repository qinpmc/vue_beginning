vue3:


https://blog.csdn.net/winterking3/article/details/126118712
1、app.config.globalProperties使用

```
const app = createApp(App);

//全局方法
app.config.globalProperties.$listByDictTypeCode = listByDictTypeCode;

```

在Vue文件中: 

```
const { proxy }: any = getCurrentInstance();

... 
function handleQuery() {
  proxy.$listByDictTypeCode(dataState.dictTypeCode).then((data: any) => {
    console.log(data.data)
    dataState.dictDataList = data.data;
  })
}
```






2、getCurrentInstance
在Vue3中，getCurrentInstance()可以用来获取当前组件实例


3、reactive和ref
reactive() 只适用于对象 (包括数组和内置类型，如 Map 和 Set)。而另一个 API ref() 则可以接受任何值类型。ref 会返回一个包裹对象，并在 .value 属性下暴露内部值。

https://cn.vuejs.org/tutorial/#step-2

```
<script setup>
import { reactive, ref } from 'vue'

const counter = reactive({ count: 0 })
const message = ref('Hello World!')
</script>

<template>
  <h1>{{ message }}</h1>
  <p>Count is: {{ counter.count }}</p>
</template>
```


4、computed 计算属性

https://cn.vuejs.org/tutorial/#step-8

<script setup>
import { ref, computed } from 'vue'

let id = 0

const newTodo = ref('')
const hideCompleted = ref(false)
const todos = ref([
  { id: id++, text: 'Learn HTML', done: true },
  { id: id++, text: 'Learn JavaScript', done: true },
  { id: id++, text: 'Learn Vue', done: false }
])

const filteredTodos = computed(() => {
  return hideCompleted.value
    ? todos.value.filter((t) => !t.done)
    : todos.value
})
...
</script>


5、监听 Vue3中watch和watchEffect区别和用法
https://cn.vuejs.org/guide/essentials/watchers.html
https://zhuanlan.zhihu.com/p/528715632
https://blog.csdn.net/weixin_42349568/article/details/127004496

（1）. watch 的第一个参数可以是不同形式的“数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组

（2）.直接给 watch() 传入一个响应式对象，会隐式地创建一个深层侦听器——该回调函数在所有嵌套的变更时都会被触发：

```
//所有嵌套的变更时都会被触发，可能影响性能
const obj = reactive({ count: 0 })

watch(obj, (newValue, oldValue) => {
  // 在嵌套的属性变更时触发
  // 注意：`newValue` 此处和 `oldValue` 是相等的
  // 因为它们是同一个对象！
})

obj.count++

```

相比之下，一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调：

```
// 返回响应式对象的 getter 函数更好
watch(
  () => state.someObject, //getter 函数
  () => {
    // 仅当 state.someObject 被替换时触发
  }
)
```



（3）.！！注意，你**不能直接侦听响应式对象的属性值**，例如:

```
const obj = reactive({ count: 0 })

// 错误，因为 watch() 得到的参数是一个 number
watch(obj.count, (count) => {
  console.log(`count is: ${count}`)
})

```


修改： 这里需要用一个返回该属性的 getter 函数：

```
// 提供一个 getter 函数
watch(
  () => obj.count,
  (count) => {
    console.log(`count is: ${count}`)
  }
)
```


（4）.watch vs. watchEffect​
watch 和 watchEffect 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：

watch 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。watch 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。

watchEffect，则会在副作用发生期间追踪依赖。它会在**同步**执行过程中，**自动追踪所有能访问到的响应式属性**。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。

```
const todoId = ref(1)
const data = ref(null)

watch(
  todoId,
  async () => {
    const response = await fetch(
      `https://jsonplaceholder.typicode.com/todos/${todoId.value}`
    )
    data.value = await response.json()
  },
  { immediate: true } //同步立即执行
)
```

使用以下watchEffect更简洁：

```
watchEffect(async () => {
  const response = await fetch(
    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`
  )
  data.value = await response.json()
})

```

6. 模板引用
https://cn.vuejs.org/tutorial/#step-9

```
<script setup>
import { ref, onMounted } from 'vue'

const pElementRef = ref(null)

onMounted(() => {
  //pElementRef名称应该和 template中引用的dom上的ref属性值相同
  pElementRef.value.textContent = 'mounted!'
})
</script>

<template>
  <p ref="pElementRef">hello</p>
</template>

```

7. 父子组件Props 

子组件可以通过 props 从父组件接受动态数据。首先，需要声明它所接受的 props

```
//子组件ChildComp.vue
<script setup>
//声明子组件所接受的 props
const props = defineProps({
  msg: String
})
</script>

<template>
  <h2>{{ msg || 'No props passed yet' }}</h2>
</template>

```


```
//父组件
<script setup>
import { ref } from 'vue'
import ChildComp from './ChildComp.vue'

const greeting = ref('Hello from parent')
</script>

<template>
  <ChildComp :msg="greeting" />           //这里把父组件值传递给子组件msg属性
</template>

```


8. 子组件发射事件给父组件
https://cn.vuejs.org/tutorial/#step-13

emit() 的第一个参数是事件的名称。其他所有参数都将传递给事件监听器

```
//子组件ChildComp
<script setup>
const emit = defineEmits(['response'])

emit('response', 'hello from child')
</script>

<template>
  <h2>Child component</h2>
</template>
```


```
//父组件
<script setup>
import { ref } from 'vue'
import ChildComp from './ChildComp.vue'

const childMsg = ref('No child msg yet')
</script>

<template>
  <ChildComp @response="(msg) => childMsg = msg" />
  <p>{{ childMsg }}</p>
</template>
```

9. 插槽
https://cn.vuejs.org/tutorial/#step-14

父组件还可以通过插槽 (slots) 将模板片段传递给子组件：

<ChildComp>
  This is some slot content!
</ChildComp>


```
//子组件ChildComp

<template>
  <slot>Fallback content</slot>
</template>

```

```
//父组件
<script setup>
import { ref } from 'vue'
import ChildComp from './ChildComp.vue'

const msg = ref('from parent')
</script>

<template>
  <ChildComp>Message: {{ msg }}</ChildComp>
  <div>-------------------------分割线-------------------------</div>
  <ChildComp>
  This is some slot content!
</ChildComp>
</template>

```